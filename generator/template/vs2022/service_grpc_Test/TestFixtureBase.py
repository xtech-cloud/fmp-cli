import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using {{org}}.FMP.MOD.{{module}}.App.Service;

public abstract class TestFixtureBase : IDisposable
{
    public TestServerCallContext context { get; set; }

    public TestFixtureBase()
    {
        context = TestServerCallContext.Create();
    }

    public virtual void Dispose()
    {
{{database_dispose}}
    }

{{method_blocks}}
}

"""

template_mongodb_dispose = """
        var options = new DatabaseOptions();
        var mongoClient = new MongoDB.Driver.MongoClient(options.Value.ConnectionString);
        mongoClient.DropDatabase(options.Value.DatabaseName);
"""

template_method = """
    protected {{service}}Service? service{{service}}_ { get; set; }

    public {{service}}Service getService{{service}}()
    {
        if(null == service{{service}}_)
        {
            new{{service}}Service();
        }
        return service{{service}}_!;
    }

    /// <summary>
    /// 实例化服务
    /// </summary>
    /// <example>
    /// service{{service}}_ = new {{service}}Service(new {{service}}DAO(new DatabaseOptions()));
    /// </example>
    protected abstract void new{{service}}Service();
"""


def generate(
    _orgname: str,
    _modulename: str,
    _outputdir: str,
    _enums: List[str],
    _services: Dict[str, Dict[str, Tuple]],
    _messages: Dict[str, List[Tuple]],
    _databasedriver: str,
):
    method_blocks= ""
    for service in _services.keys():
        method_blocks = method_blocks + template_method.replace("{{service}}", service)
    databse_dispose = ""
    if "mongodb" == _databasedriver:
        databse_dispose = template_mongodb_dispose
    contents = (
        template.replace("{{org}}", _orgname)
        .replace("{{module}}", _modulename)
        .replace("{{method_blocks}}", method_blocks)
        .replace("{{database_dispose}}", databse_dispose)
    )
    filepath = os.path.join(_outputdir, "TestFixtureBase.cs")
    writer.write(filepath, contents, True)
