import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using XTC.FMP.LIB.MVCS;
using {{org}}.FMP.MOD.{{module}}.LIB.Bridge;

namespace {{org}}.FMP.MOD.{{module}}.LIB.MVCS
{
    /// <summary>
    /// {{service}}视图层基类
    /// </summary>
    public class {{service}}ViewBase : View
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        /// <param name="_gid">直系的组的ID</param>
        public {{service}}ViewBase(string _uid, string _gid) : base(_uid)
        {
            gid_ = _gid;
        }

{{method_blocks}}

        /// <summary>
        /// 获取直系数据层
        /// </summary>
        /// <returns>数据层</returns>
        protected {{service}}Model? getModel()
        {
            if(null == model_)
                model_ = findModel({{service}}Model.NAME + "." + gid_) as {{service}}Model;
            return model_;
        }

        /// <summary>
        /// 获取直系服务层
        /// </summary>
        /// <returns>服务层</returns>
        protected {{service}}Service? getService()
        {
            if(null == service_)
                service_ = findService({{service}}Service.NAME + "." + gid_) as {{service}}Service;
            return service_;
        }

        /// <summary>
        /// 获取直系UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        protected {{service}}Facade? getFacade()
        {
            if(null == facade_)
                facade_ = findFacade({{service}}Facade.NAME + "." + gid_) as {{service}}Facade;
            return facade_;
        }

        /// <summary>
        /// 直系的MVCS的四个组件的组的ID
        /// </summary>
        protected string gid_ = "";

        /// <summary>
        /// 直系数据层
        /// </summary>
        private {{service}}Model? model_;

        /// <summary>
        /// 直系服务层
        /// </summary>
        private {{service}}Service? service_;

        /// <summary>
        /// 直系UI装饰层
        /// </summary>
        private {{service}}Facade? facade_;
    }
}

"""

template_method = """
        /// <summary>
        /// 刷新{{rpc}}的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">{{response}}的数据传输对象</param>
        public void RefreshProto{{rpc}}(Error _err, {{response}}DTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as I{{service}}UiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_{{rpc}}_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.Refresh{{rpc}}(_dto);
        }
"""



def generate(
    _orgname: str,
    _modulename: str,
    _outputdir: str,
    _enums: List[str],
    _services: Dict[str, Dict[str, Tuple]],
    _messages: Dict[str, List[Tuple]],
):
    for service in _services.keys():
        method_blocks = ""
        for rpc_name in _services[service].keys():
            rpc_map = _services[service][rpc_name]
            method_block = (
                template_method.replace("{{service}}", service)
                .replace("{{rpc}}", rpc_name)
                .replace("{{response}}", rpc_map[1])
            )
            method_blocks = method_blocks + method_block
        contents = (
            template.replace("{{org}}", _orgname)
            .replace("{{module}}", _modulename)
            .replace("{{service}}", service)
            .replace("{{method_blocks}}", method_blocks)
        )
        filepath = os.path.join(_outputdir, "{}ViewBase.cs".format(service))
        writer.write(filepath, contents, True)
