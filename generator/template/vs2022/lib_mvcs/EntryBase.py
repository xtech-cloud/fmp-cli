import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using System.Collections.Generic;
using Grpc.Net.Client;
using XTC.FMP.LIB.MVCS;

namespace {{org}}.FMP.MOD.{{module}}.LIB.MVCS
{

    /// <summary>
    /// 模块选项
    /// </summary>
    public class Options : UserData
    {
        /// 获取GRPC通道
        /// </summary>
        public GrpcChannel? getChannel()
        {
            return channel_;
        }

        /// <summary>
        /// 设置GRPC通道
        /// </summary>
        /// <param name="_channel">GRPC通道</param>
        public void setChannel(GrpcChannel? _channel)
        {
            channel_ = _channel;
        }

        /// <summary>
        /// 获取权限列表
        /// </summary>
        public Dictionary<string,string> getPermissionS()
        {
            return permissionS_;
        }

        /// <summary>
        /// 设置权限列表
        /// </summary>
        /// <param name="_permissionS">权限列表</param>
        public void setPermissionS(Dictionary<string,string> _permissionS)
        {
            permissionS_ = _permissionS;
        }

        /// <summary>
        /// GRPC通道
        /// </summary>
        private GrpcChannel? channel_;

        /// <summary>
        /// 权限列表
        /// </summary>
        private Dictionary<string, string> permissionS_ = new Dictionary<string, string>();
    }

    /// <summary>
    /// 模块入口基类
    /// </summary>
    public class EntryBase : UserData
    {
        /// <summary>
        /// 模块选项
        /// </summary>
        protected Options? options_;
{{member_blocks}}

        /// <summary>
        /// 注入MVCS框架
        /// </summary>
        /// <param name="_framework">MVCS框架</param>
        /// <param name="_options">模块选项</param>
        public void Inject(Framework _framework, Options _options)
        {
            framework_ = _framework;
            options_ = _options;
        }

        /// <summary>
        /// 获取权限列表
        /// </summary>
        public Dictionary<string, string> getPermissionS()
        {
            return options_?.getPermissionS() ?? new Dictionary<string, string>();
        }

        /// <summary>
        /// 静态注册
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error staticRegister(string _gid, Logger? _logger)
        {
            _logger?.Trace("StaticRegister");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }
{{static_register_blocks}}
            return Error.OK;
        }

        /// <summary>
        /// 动态注册
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error dynamicRegister(string _gid, Logger _logger)
        {
            _logger.Trace("DynamicRegister");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }
{{dynamic_register_blocks}}
            return Error.OK;
        }

        /// <summary>
        /// 静态注销
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error staticCancel(string _gid, Logger _logger)
        {
            _logger?.Trace("StaticCancel");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }
{{static_cancel_blocks}}
            return Error.OK;
        }

        /// <summary>
        /// 动态注销
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error dynamicCancel(string _gid, Logger _logger)
        {
            _logger?.Trace("DynamicCancel");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }
{{dynamic_cancel_blocks}}
            return Error.OK;
        }

        /// <summary>
        /// MVCS框架
        /// </summary>
        protected Framework? framework_;
    }
}

"""

template_member = """
        protected Dictionary<string, {{service}}Facade?> facade{{service}}StaticMap_ = new Dictionary<string, {{service}}Facade?>();
        protected Dictionary<string, {{service}}Model?> model{{service}}StaticMap_ = new Dictionary<string, {{service}}Model?>();
        protected Dictionary<string, {{service}}View?> view{{service}}StaticMap_ = new Dictionary<string, {{service}}View?>();
        protected Dictionary<string, {{service}}Controller?> controller{{service}}StaticMap_ = new Dictionary<string, {{service}}Controller?>();
        protected Dictionary<string, {{service}}Service?> service{{service}}StaticMap_ = new Dictionary<string, {{service}}Service?>();

        protected Dictionary<string, {{service}}Facade?> facade{{service}}DynamicMap_ = new Dictionary<string, {{service}}Facade?>();
        protected Dictionary<string, {{service}}Model?> model{{service}}DynamicMap_ = new Dictionary<string, {{service}}Model?>();
        protected Dictionary<string, {{service}}View?> view{{service}}DynamicMap_ = new Dictionary<string, {{service}}View?>();
        protected Dictionary<string, {{service}}Controller?> controller{{service}}DynamicMap_ = new Dictionary<string, {{service}}Controller?>();
        protected Dictionary<string, {{service}}Service?> service{{service}}DynamicMap_ = new Dictionary<string, {{service}}Service?>();

        /// <summary>
        /// 获取{{service}}的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public {{service}}Facade? getStatic{{service}}Facade(string _gid)
        {
            {{service}}Facade? facade = null;
            if (!facade{{service}}StaticMap_.TryGetValue({{service}}Facade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }

        /// <summary>
        /// 获取{{service}}的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public {{service}}Facade? getDynamic{{service}}Facade(string _gid)
        {
            {{service}}Facade? facade = null;
            if (!facade{{service}}DynamicMap_.TryGetValue({{service}}Facade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }
"""

template_static_register = """
            // 注册数据层
            var model{{service}} = new {{service}}Model({{service}}Model.NAME + "." + _gid, _gid);
            model{{service}}StaticMap_[{{service}}Model.NAME + "." + _gid] = model{{service}};
            framework_.getStaticPipe().RegisterModel(model{{service}});
            // 注册视图层
            var view{{service}} = new {{service}}View({{service}}View.NAME + "." + _gid, _gid);
            view{{service}}StaticMap_[{{service}}View.NAME + "." + _gid] = view{{service}};
            framework_.getStaticPipe().RegisterView(view{{service}});
            // 注册控制层
            var controller{{service}} = new {{service}}Controller({{service}}Controller.NAME + "." + _gid, _gid);
            controller{{service}}StaticMap_[{{service}}Controller.NAME + "." + _gid] = controller{{service}};
            framework_.getStaticPipe().RegisterController(controller{{service}});
            // 注册服务层
            var service{{service}} = new {{service}}Service({{service}}Service.NAME + "." + _gid, _gid);
            service{{service}}StaticMap_[{{service}}Service.NAME + "." + _gid] = service{{service}};
            framework_.getStaticPipe().RegisterService(service{{service}});
            service{{service}}.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facade{{service}} = new {{service}}Facade({{service}}Facade.NAME + "." + _gid, _gid);
            facade{{service}}StaticMap_[{{service}}Facade.NAME + "." + _gid] = facade{{service}};
            var bridge{{service}} = new {{service}}ViewBridge();
            bridge{{service}}.service = service{{service}};
            facade{{service}}.setViewBridge(bridge{{service}});
            framework_.getStaticPipe().RegisterFacade(facade{{service}});
"""

template_dynamic_register = """
            // 注册数据层
            var model{{service}} = new {{service}}Model({{service}}Model.NAME + "." + _gid, _gid);
            model{{service}}DynamicMap_[{{service}}Model.NAME + "." + _gid] = model{{service}};
            framework_.getDynamicPipe().PushModel(model{{service}});
            // 注册视图层
            var view{{service}} = new {{service}}View({{service}}View.NAME + "." + _gid, _gid);
            view{{service}}DynamicMap_[{{service}}View.NAME + "." + _gid] = view{{service}};
            framework_.getDynamicPipe().PushView(view{{service}});
            // 注册控制层
            var controller{{service}} = new {{service}}Controller({{service}}Controller.NAME + "." + _gid, _gid);
            controller{{service}}DynamicMap_[{{service}}Controller.NAME + "." + _gid] = controller{{service}};
            framework_.getDynamicPipe().PushController(controller{{service}});
            // 注册服务层
            var service{{service}} = new {{service}}Service({{service}}Service.NAME + "." + _gid, _gid);
            service{{service}}DynamicMap_[{{service}}Service.NAME + "." + _gid] = service{{service}};
            framework_.getDynamicPipe().PushService(service{{service}});
            service{{service}}.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facade{{service}} = new {{service}}Facade({{service}}Facade.NAME + "." + _gid, _gid);
            facade{{service}}DynamicMap_[{{service}}Facade.NAME + "." + _gid] = facade{{service}};
            var bridge{{service}} = new {{service}}ViewBridge();
            bridge{{service}}.service = service{{service}};
            facade{{service}}.setViewBridge(bridge{{service}});
            framework_.getDynamicPipe().PushFacade(facade{{service}});
"""

template_static_cancel = """
            // 注销服务层
            {{service}}Service? service{{service}};
            if(service{{service}}StaticMap_.TryGetValue({{service}}Service.NAME + "." + _gid, out service{{service}}))
            {
                framework_.getStaticPipe().CancelService(service{{service}});
                service{{service}}StaticMap_.Remove({{service}}Service.NAME + "." +_gid);
            }
            // 注销控制层
            {{service}}Controller? controller{{service}};
            if(controller{{service}}StaticMap_.TryGetValue({{service}}Controller.NAME + "." + _gid, out controller{{service}}))
            {
                framework_.getStaticPipe().CancelController(controller{{service}});
                controller{{service}}StaticMap_.Remove({{service}}Controller.NAME + "." +_gid);
            }
            // 注销视图层
            {{service}}View? view{{service}};
            if(view{{service}}StaticMap_.TryGetValue({{service}}View.NAME + "." + _gid, out view{{service}}))
            {
                framework_.getStaticPipe().CancelView(view{{service}});
                view{{service}}StaticMap_.Remove({{service}}View.NAME + "." +_gid);
            }
            // 注销UI装饰层
            {{service}}Facade? facade{{service}};
            if(facade{{service}}StaticMap_.TryGetValue({{service}}Facade.NAME + "." + _gid, out facade{{service}}))
            {
                framework_.getStaticPipe().CancelFacade(facade{{service}});
                facade{{service}}StaticMap_.Remove({{service}}Facade.NAME + "." +_gid);
            }
            // 注销数据层
            {{service}}Model? model{{service}};
            if(model{{service}}StaticMap_.TryGetValue({{service}}Model.NAME + "." + _gid, out model{{service}}))
            {
                framework_.getStaticPipe().CancelModel(model{{service}});
                model{{service}}StaticMap_.Remove({{service}}Model.NAME + "." +_gid);
            }
"""

template_dynamic_cancel = """
            // 注销服务层
            {{service}}Service? service{{service}};
            if(service{{service}}DynamicMap_.TryGetValue({{service}}Service.NAME + "." + _gid, out service{{service}}))
            {
                framework_.getDynamicPipe().PopService(service{{service}});
                service{{service}}DynamicMap_.Remove({{service}}Service.NAME + "." +_gid);
            }
            // 注销控制层
            {{service}}Controller? controller{{service}};
            if(controller{{service}}DynamicMap_.TryGetValue({{service}}Controller.NAME + "." + _gid, out controller{{service}}))
            {
                framework_.getDynamicPipe().PopController(controller{{service}});
                controller{{service}}DynamicMap_.Remove({{service}}Controller.NAME + "." +_gid);
            }
            // 注销视图层
            {{service}}View? view{{service}};
            if(view{{service}}DynamicMap_.TryGetValue({{service}}View.NAME + "." + _gid, out view{{service}}))
            {
                framework_.getDynamicPipe().PopView(view{{service}});
                view{{service}}DynamicMap_.Remove({{service}}View.NAME + "." +_gid);
            }
            // 注销UI装饰层
            {{service}}Facade? facade{{service}};
            if(facade{{service}}DynamicMap_.TryGetValue({{service}}Facade.NAME + "." + _gid, out facade{{service}}))
            {
                framework_.getDynamicPipe().PopFacade(facade{{service}});
                facade{{service}}DynamicMap_.Remove({{service}}Facade.NAME + "." +_gid);
            }
            // 注销数据层
            {{service}}Model? model{{service}};
            if(model{{service}}DynamicMap_.TryGetValue({{service}}Model.NAME + "." + _gid, out model{{service}}))
            {
                framework_.getDynamicPipe().PopModel(model{{service}});
                model{{service}}DynamicMap_.Remove({{service}}Model.NAME + "." +_gid);
            }
"""


def generate(_options, _outputdir: str):
    org_name = _options["org_name"]
    module_name = _options["module_name"]
    services = _options["services"]
    member_blocks = ""
    static_register_blocks = ""
    dynamic_register_blocks = ""
    static_cancel_blocks = ""
    dynamic_cancel_blocks = ""
    for service in services.keys():
        member_block = template_member.replace("{{service}}", service)
        member_blocks = member_blocks + member_block
        static_register_block = template_static_register.replace("{{service}}", service)
        static_register_blocks = static_register_blocks + static_register_block
        dynamic_register_block = template_dynamic_register.replace(
            "{{service}}", service
        )
        dynamic_register_blocks = dynamic_register_blocks + dynamic_register_block
        static_cancel_block = template_static_cancel.replace("{{service}}", service)
        static_cancel_blocks = static_cancel_blocks + static_cancel_block
        dynamic_cancel_block = template_dynamic_cancel.replace("{{service}}", service)
        dynamic_cancel_blocks = dynamic_cancel_blocks + dynamic_cancel_block
    # 生成项目文件
    contents = (
        template.replace("{{org}}", org_name)
        .replace("{{module}}", module_name)
        .replace("{{member_blocks}}", member_blocks)
        .replace("{{static_register_blocks}}", static_register_blocks)
        .replace("{{dynamic_register_blocks}}", dynamic_register_blocks)
        .replace("{{static_cancel_blocks}}", static_cancel_blocks)
        .replace("{{dynamic_cancel_blocks}}", dynamic_cancel_blocks)
    )
    contents = contents.replace("{{version}}", _options["version"])
    filepath = os.path.join(_outputdir, "EntryBase.cs")
    writer.write(filepath, contents, True)
