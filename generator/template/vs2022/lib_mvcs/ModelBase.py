import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using XTC.FMP.LIB.MVCS;
using {{org}}.FMP.MOD.{{module}}.LIB.Proto;

namespace {{org}}.FMP.MOD.{{module}}.LIB.MVCS
{
    /// <summary>
    /// {{service}}数据层基类
    /// </summary>
    public class {{service}}ModelBase : Model
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        /// <param name="_gid">直系的组的ID</param>
        public {{service}}ModelBase(string _uid, string _gid) : base(_uid)
        {
            gid_ = _gid;
        }

{{method_blocks}}

        /// <summary>
        /// 获取直系控制层
        /// </summary>
        /// <returns>控制层</returns>
        protected {{service}}Controller? getController()
        {
            if(null == controller_)
                controller_ = findController({{service}}Controller.NAME + "." + gid_) as {{service}}Controller;
            return controller_;
        }

        /// <summary>
        /// 直系的MVCS的四个组件的组的ID
        /// </summary>
        protected string gid_ = "";

        /// <summary>
        /// 直系控制层
        /// </summary>
        private {{service}}Controller? controller_;
    }
}


"""

template_method = """
        /// <summary>
        /// 更新{{rpc}}的数据
        /// </summary>
        /// <param name="_response">{{rpc}}的回复</param>
        public void UpdateProto{{rpc}}({{response}} _response)
        {
            getController()?.UpdateProto{{rpc}}(status_ as {{service}}Model.{{service}}Status, _response);
        }
"""


def generate(_options, _outputdir: str):
    org_name = _options["org_name"]
    module_name = _options["module_name"]
    services = _options["services"]
    for service in services.keys():
        method_blocks = ""
        for rpc_name in services[service].keys():
            rpc_map = services[service][rpc_name]
            method_block = (
                template_method.replace("{{service}}", service)
                .replace("{{rpc}}", rpc_name)
                .replace("{{response}}", rpc_map[1])
            )
            method_blocks = method_blocks + method_block
        contents = (
            template.replace("{{org}}", org_name)
            .replace("{{module}}", module_name)
            .replace("{{service}}", service)
            .replace("{{method_blocks}}", method_blocks)
        )
        contents = contents.replace("{{version}}", _options["version"])
        filepath = os.path.join(_outputdir, "{}ModelBase.cs".format(service))
        writer.write(filepath, contents, True)
