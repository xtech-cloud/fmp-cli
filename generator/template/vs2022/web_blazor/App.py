import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template = """
<!--
*************************************************************************************
   !!! Generated by the fmp-cli.  DO NOT EDIT!
*************************************************************************************
-->

<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="new[] { {{type_blocks}} }">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(BasicLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BasicLayout)">
            <p>Not found</p>
        </LayoutView>
    </NotFound>
</Router>
<AntContainer />
"""

template_type = "typeof({{org}}.FMP.MOD.{{module}}.LIB.Razor.{{service}}Component).Assembly"

def generate(
    _orgname: str,
    _modulename: str,
    _outputdir: str,
    _enums: List[str],
    _services: Dict[str, Dict[str, Tuple]],
    _messages: Dict[str, List[Tuple]],
):
    type_blocks = ""
    for service in _services.keys():
        type_blocks = type_blocks + template_type.replace("{{org}}", _orgname).replace("{{module}}", _modulename).replace("{{service}}", service)
    contents = (
        template.replace("{{org}}", _orgname)
        .replace("{{module}}", _modulename)
        .replace("{{type_blocks}}", type_blocks)
    )
    filepath = os.path.join(_outputdir, "App.razor")
    writer.write(filepath, contents, True)
