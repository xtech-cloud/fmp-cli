import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template_razor = """
@page "/{{org_lower}}/{{module_lower}}/{{service_lower}}"

<Space Direction="DirectionVHType.Vertical">
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="@__debugClick">Call</Button>
    </SpaceItem>
{{xml_blocks}}
</Space>
@code {
}
"""

template_xml = """
    <SpaceItem>
        <Text>{{rpc}}:</Text>
        <TextArea @bind-Value="@__debug{{rpc}}" Rows="4" ReadOnly="true" />
    </SpaceItem>
"""

template_razor_cs = """
using Microsoft.AspNetCore.Components;
using XTC.FMP.LIB.MVCS;
using {{org}}.FMP.MOD.{{module}}.LIB.Proto;
using {{org}}.FMP.MOD.{{module}}.LIB.Bridge;
using {{org}}.FMP.MOD.{{module}}.LIB.MVCS;

namespace {{org}}.FMP.MOD.{{module}}.LIB.Razor
{
    public partial class {{service}}Component
    {
        public class {{service}}UiBridge : I{{service}}UiBridge
        {

            public {{service}}UiBridge({{service}}Component _razor)
            {
                razor_ = _razor;
            }

            public void Alert(string _code, string _message)
            {
                if (null == razor_.messageService_)
                    return;
                Task.Run(async () =>
                {
                    await razor_.messageService_.Success(_message);
                }); 
            }

{{method_blocks}}

            private {{service}}Component razor_;
        }

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();
        }

        private async Task __debugClick()
        {
            var bridge = (getFacade()?.getViewBridge() as I{{service}}ViewBridge);
            if (null == bridge)
            {
                logger_?.Error("bridge is null");
                return;
            }
{{call_blocks}}
        }

{{member_blocks}}
    }
}
"""

template_method_razor = """
            public void Refresh{{rpc}}(IDTO _dto)
            {
                var dto = _dto as {{response}}DTO;
                razor_.__debug{{rpc}} = dto?.Value.ToString();
            }
"""

template_member_razor = """
        private string? __debug{{rpc}};
"""

template_call_razor = """
            var req{{rpc}} = new {{request}}();
            var dto{{rpc}} = new {{request}}DTO(req{{rpc}});
            logger_?.Trace("invoke On{{rpc}}Submit");
            await bridge.On{{rpc}}Submit(dto{{rpc}});
"""

template_cs = """
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using Microsoft.AspNetCore.Components;
using AntDesign;
using XTC.FMP.LIB.MVCS;
using {{org}}.FMP.MOD.{{module}}.LIB.MVCS;

namespace {{org}}.FMP.MOD.{{module}}.LIB.Razor
{
    public partial class {{service}}Component
    {
        private {{service}}Facade? getFacade()
        {
            if (null == facade_)
            {
                if (null == framework_)
                {
                    logger_?.Error("framework_ is null");
                    return null;
                }
                var entry = framework_.getUserData("{{org}}.FMP.MOD.{{module}}.LIB.MVCS.Entry") as Entry;
                if (null == entry)
                {
                    logger_?.Error("entry is null");
                    return null;
                }
                facade_ = entry?.get{{service}}Facade();
                if (null == facade_)
                {
                    logger_?.Error("facade_ is null");
                    return null;
                }
                facade_?.setUiBridge(new {{service}}UiBridge(this));
            }
            return facade_;
        }

        /// <summary>
        /// 注入的MVCS框架
        /// </summary>
        [Inject] Framework? framework_ { get; set; }

        /// <summary>
        /// 注入的日志
        /// </summary>
        [Inject] Logger? logger_ { get; set; }

        /// <summary>
        /// 直系UI装饰层
        /// </summary>
        private {{service}}Facade? facade_;

        /// <summary>
        /// 注入的全局提示服务
        /// </summary>
        [Inject] MessageService? messageService_ { get; set; }
    }
}
"""


def generate(
    _orgname: str,
    _modulename: str,
    _outputdir: str,
    _enums: List[str],
    _services: Dict[str, Dict[str, Tuple]],
    _messages: Dict[str, List[Tuple]],
):
    for service in _services.keys():
        method_blocks = ""
        member_blocks = ""
        call_blocks = ""
        xml_blocks = ""
        for rpc_name in _services[service].keys():
            rpc_map = _services[service][rpc_name]
            method_block = template_method_razor.replace("{{rpc}}", rpc_name).replace(
                "{{response}}", rpc_map[1]
            )
            method_blocks = method_blocks + method_block
            member_block = template_member_razor.replace("{{rpc}}", rpc_name)
            member_blocks = member_blocks + member_block
            call_block = template_call_razor.replace("{{rpc}}", rpc_name).replace(
                "{{request}}", rpc_map[0]
            )
            call_blocks = call_blocks + call_block
            xml_block = template_xml.replace("{{rpc}}", rpc_name)
            xml_blocks = xml_blocks + xml_block

        contents_razor = (
            template_razor.replace("{{org}}", _orgname)
            .replace("{{module}}", _modulename)
            .replace("{{service}}", service)
            .replace("{{org_lower}}", _orgname.lower())
            .replace("{{module_lower}}", _modulename.lower())
            .replace("{{service_lower}}", service.lower())
            .replace("{{xml_blocks}}", xml_blocks)
        )
        filepath_razor = os.path.join(_outputdir, "{}Component.razor".format(service))
        writer.write(filepath_razor, contents_razor, False)

        contents_razor_cs = (
            template_razor_cs.replace("{{org}}", _orgname)
            .replace("{{module}}", _modulename)
            .replace("{{service}}", service)
            .replace("{{method_blocks}}", method_blocks)
            .replace("{{member_blocks}}", member_blocks)
            .replace("{{call_blocks}}", call_blocks)
        )
        filepath_razor_cs = os.path.join(
            _outputdir, "{}Component.razor.cs".format(service)
        )
        writer.write(filepath_razor_cs, contents_razor_cs, False)

        contents_cs = (
            template_cs.replace("{{org}}", _orgname)
            .replace("{{module}}", _modulename)
            .replace("{{service}}", service)
        )
        filepath_cs = os.path.join(_outputdir, "{}Component.cs".format(service))
        writer.write(filepath_cs, contents_cs, True)
