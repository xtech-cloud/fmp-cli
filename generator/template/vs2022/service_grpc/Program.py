import os
from typing import Dict, List, Tuple
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using Microsoft.Extensions.Diagnostics.HealthChecks;
using {{org}}.FMP.MOD.{{module}}.App.Service;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddGrpc();
builder.Services.AddGrpcReflection();
builder.Services.AddGrpcHealthChecks()
                .AddCheck("{{module}}", () => HealthCheckResult.Healthy());
{{db_blocks}}
MyProgram.PreBuild(builder);
var app = builder.Build();

app.Use(async (context, next) =>
{
    context.Response.Headers.Add("Access-Control-Allow-Credentials", "true");
    context.Response.Headers.Add("Access-Control-Allow-Headers", "*");
    context.Response.Headers.Add("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS,HEAD,PATCH");
    context.Response.Headers.Add("Access-Control-Allow-Origin", "*");
    context.Response.Headers.Add("Access-Control-Max-Age", "100000");
    context.Response.Headers.Add("Access-Control-Expose-Headers", "Grpc-Status,Grpc-Message,Grpc-Encoding,Grpc-Accept-Encoding");
    if (context.Request.Method.ToUpper() == "OPTIONS")
    {
        return;
    }
    // Do work that can write to the Response.
    await next.Invoke();
    // Do logging or other work that doesn't write to the Response.
});
app.UseGrpcWeb();

{{mapservice_blocks}}

app.MapGrpcHealthChecksService();
app.MapGet("/", () => "{{module}}");

IWebHostEnvironment env = app.Environment;

if (env.IsDevelopment())
{
    app.MapGrpcReflectionService();
}

MyProgram.PreRun(app);
app.Run();

"""

template_MapGrpcService = """
app.MapGrpcService<{{service}}Service>().EnableGrpcWeb();
"""

template_Driver_Mongo = """
builder.Services.Configure<DatabaseSettings>(builder.Configuration.GetSection("Database"));
"""


def generate(_options, _outputdir: str):
    org_name = _options["org_name"]
    module_name = _options["module_name"]
    database_driver = _options["database_driver"]
    services = _options["services"]

    mapservice_blocks = ""
    for service in services.keys():
        mapservice_blocks = mapservice_blocks + template_MapGrpcService.replace(
            "{{service}}", service
        )
    contents = (
        template.replace("{{org}}", org_name)
        .replace("{{module}}", module_name)
        .replace("{{mapservice_blocks}}", mapservice_blocks)
    )
    if "mongodb" == database_driver:
        contents = contents.replace("{{db_blocks}}", template_Driver_Mongo)
    else:
        contents = contents.replace("{{db_blocks}}", "")

    contents = contents.replace("{{version}}", _options["version"])
    filepath = os.path.join(_outputdir, "Program.cs")
    writer.write(filepath, contents, True)
