import os
import uuid
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using System;
using System.Threading;
using LibMVCS = XTC.FMP.LIB.MVCS;
using {{org_name}}.FMP.MOD.{{module_name}}.LIB.Bridge;

namespace {{org_name}}.FMP.MOD.{{module_name}}.LIB.Unity
{

    public class {{service}}UiBridgeBase : I{{service}}UiBridge
    {
        public LibMVCS.Logger logger { get; set; }

        public virtual void Alert(string _code, string _message, SynchronizationContext _context)
        {
            throw new NotImplementedException();
        }

{{method_blocks}}
    }
}
"""

template_method = """
        public virtual void Refresh{{rpc}}(IDTO _dto, SynchronizationContext _context)
        {
            throw new NotImplementedException();
        }
"""

def generate(_options, _outputdir: str):
    output_dir = os.path.join(_outputdir, "Assets")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Scripts")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Module")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "_Generated_")
    os.makedirs(output_dir, exist_ok=True)

    services = _options["services"]
    for service in services.keys():
        method_blocks = ""
        for rpc_name in services[service].keys():
            rpc_map = services[service][rpc_name]
            method_block = template_method
            method_block = method_block.replace("{{rpc}}", rpc_name)
            method_blocks = method_blocks + method_block

        contents = template
        contents = contents.replace("{{org_name}}", _options["org_name"])
        contents = contents.replace("{{module_name}}", _options["module_name"])
        contents = contents.replace("{{version}}", _options["version"])
        contents = contents.replace("{{service}}", service)
        contents = contents.replace("{{method_blocks}}", method_blocks)
        output_path = os.path.join(output_dir, "{}UiBridgeBase.cs".format(service))
        writer.write(output_path, contents, True)
