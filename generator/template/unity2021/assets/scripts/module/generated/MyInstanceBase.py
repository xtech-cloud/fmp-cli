import os
import uuid
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using UnityEngine;
using LibMVCS = XTC.FMP.LIB.MVCS;
using {{org_name}}.FMP.MOD.{{module_name}}.LIB.Bridge;
using {{org_name}}.FMP.MOD.{{module_name}}.LIB.MVCS;
using {{org_name}}.FMP.MOD.{{module_name}}.LIB.Proto;

namespace {{org_name}}.FMP.MOD.{{module_name}}.LIB.Unity
{
    public class MyInstanceBase
    {
        public string uid { get; private set; }
        public GameObject rootUI { get; private set; }
        public GameObject rootAttachments { get; private set; }

{{member_blocks}}

        protected MyEntryBase entry_ { get; set; }
        protected LibMVCS.Logger logger_ { get; set; }
        protected MyConfig config_ { get; set; }
        protected MyConfig.Style style_ { get; set; }
        protected Dictionary<string, LibMVCS.Any> settings_ { get; set; }
        protected MonoBehaviour mono_ {get;set;}

        public MyInstanceBase(string _uid, string _style, MyConfig _config, LibMVCS.Logger _logger, Dictionary<string, LibMVCS.Any> _settings, MyEntryBase _entry, MonoBehaviour _mono, GameObject _rootAttachments)
        {
            uid = _uid;
            config_ = _config;
            logger_ = _logger;
            settings_ = _settings;
            entry_ = _entry;
            mono_ = _mono;
            rootAttachments = _rootAttachments;
            foreach(var style in config_.styles)
            {
                if (style.name.Equals(_style))
                {
                    style_ = style;
                    break;
                }
            }
        }

        /// <summary>
        /// 实例化UI
        /// </summary>
        /// <param name="_instanceUI">ui的实例模板</param>
        public void InstantiateUI(GameObject _instanceUI)
        {
            rootUI = Object.Instantiate(_instanceUI, _instanceUI.transform.parent);
            rootUI.name = uid;
        }

        public void SetupBridges()
        {
{{dynamic_register_blocks}}
        }

        protected void loadSpriteFromTheme(string _file, System.Action<Sprite> _onFinish)
        {
            Sprite sprite = null;

            string datapath = settings_["datapath"].AsString();
            string vendor = settings_["vendor"].AsString();
            string dir = System.IO.Path.Combine(datapath, vendor);
            dir = System.IO.Path.Combine(dir, "themes");
            dir = System.IO.Path.Combine(dir, MyEntryBase.ModuleName);
            string filefullpath = System.IO.Path.Combine(dir, _file);
            if (System.IO.File.Exists(filefullpath))
            {
                var bytes = System.IO.File.ReadAllBytes(filefullpath);
                var texture = new Texture2D(10, 10, TextureFormat.RGBA32, false);
                texture.LoadImage(bytes);
                sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f));
            }
            else
            {
                logger_.Error("{0} not found", filefullpath);
            }

            _onFinish(sprite);
        }

         
        protected string combineAssetPath(string _source, string _uri)
        {
            if(_source.Equals("file://assloud"))
            {
                var dir = Path.Combine(settings_["datapath"].AsString(), settings_["vendor"].AsString());
                dir = Path.Combine(dir, "assloud");
                return Path.Combine(dir, _uri);
            }
            return _uri;
        }

{{method_blocks}}

    }
}
"""

template_members = """
        public I{{service}}ViewBridge viewBridge{{service}} { get; set; }
"""

template_dynamic_register_blocks = """
            var facade{{service}} = entry_.getDynamic{{service}}Facade(uid);
            var bridge{{service}} = new {{service}}UiBridge();
            bridge{{service}}.logger = logger_;
            facade{{service}}.setUiBridge(bridge{{service}});
            viewBridge{{service}} = facade{{service}}.getViewBridge() as I{{service}}ViewBridge;
"""

template_method = """
        protected virtual void submit{{service}}{{rpc}}({{request}} _request)
        {
            var dto = new {{request}}DTO(_request);
            SynchronizationContext context = SynchronizationContext.Current;
            Task.Run(async () =>
            {
                try
                {
                    var reslut = await viewBridge{{service}}.On{{rpc}}Submit(dto, context);
                    if (!LibMVCS.Error.IsOK(reslut))
                    {
                        logger_.Error(reslut.getMessage());
                    }
                }
                catch (System.Exception ex)
                {
                    logger_.Exception(ex);
                }
            });
        }
"""

def generate(_options, _outputdir: str):
    output_dir = os.path.join(_outputdir, "Assets")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Scripts")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Module")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "_Generated_")
    os.makedirs(output_dir, exist_ok=True)

    member_blocks = ""
    method_blocks = ""
    dynamic_register_blocks = ""
    services = _options["services"]
    for service in services.keys():
        dynamic_register_block = template_dynamic_register_blocks
        dynamic_register_block = dynamic_register_block.replace("{{service}}", service)
        dynamic_register_blocks = dynamic_register_blocks + dynamic_register_block
        member_blocks = member_blocks + template_members.replace("{{service}}", service)
        for rpc_name in services[service].keys():
            rpc_map = services[service][rpc_name]
            method_block = template_method
            method_block = method_block.replace("{{service}}", service)
            method_block = method_block.replace("{{rpc}}", rpc_name)
            method_block = method_block.replace("{{request}}", rpc_map[0])
            method_blocks = method_blocks + method_block

    contents = template
    contents = contents.replace("{{org_name}}", _options["org_name"])
    contents = contents.replace("{{module_name}}", _options["module_name"])
    contents = contents.replace("{{version}}", _options["version"])
    contents = contents.replace("{{member_blocks}}", member_blocks)
    contents = contents.replace("{{method_blocks}}", method_blocks)
    contents = contents.replace("{{dynamic_register_blocks}}", dynamic_register_blocks)
    output_path = os.path.join(output_dir, "MyInstanceBase.cs")
    writer.write(output_path, contents, True)
