import os
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using System;
using System.IO;
using UnityEngine;

namespace {{org_name}}.FMP.MOD.{{module_name}}.LIB.Unity
{
    /// <summary>
    /// 内容读取器
    /// </summary>
    public class AssetReader
    {
        protected ObjectsPool assetObjectsPool_ { get; private set; }

        public AssetReader(ObjectsPool _assetObjectsPool)
        {
            assetObjectsPool_ = _assetObjectsPool;
        }

        /// <summary>
        /// 资产库的根目录的绝对路径
        /// </summary>
        public string AssetRootPath { get; set; }

        /// <summary>
        /// 加载纹理
        /// </summary>
        /// <param name="_file">文件在AssetRootPath中的相对路径</param>
        public void LoadTexture(string _file, Action<Texture2D> _onFinish, Action _onError)
        {
            string filefullpath = Path.Combine(AssetRootPath, _file);
            assetObjectsPool_.LoadTexture(filefullpath, null, _onFinish, _onError);
        }

        /// <summary>
        /// 加载文本
        /// </summary>
        /// <param name="_file">文件在AssetRootPath中的相对路径</param>
        public void LoadText(string _file, Action<byte[]> _onFinish, Action _onError)
        {
            string filefullpath = Path.Combine(AssetRootPath, _file);
            assetObjectsPool_.LoadText(filefullpath, null, _onFinish, _onError);
        }
    }
}
"""


def generate(_options, _outputdir: str):
    output_dir = os.path.join(_outputdir, "Assets")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Scripts")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Module")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "_Generated_")
    os.makedirs(output_dir, exist_ok=True)

    contents = template
    contents = contents.replace("{{org_name}}", _options["org_name"])
    contents = contents.replace("{{module_name}}", _options["module_name"])
    contents = contents.replace("{{version}}", _options["version"])
    output_path = os.path.join(output_dir, "AssetReader.cs")
    writer.write(output_path, contents, True)
