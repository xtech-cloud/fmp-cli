import os
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using System;
using System.IO;
using UnityEngine;

namespace {{org_name}}.FMP.MOD.{{module_name}}.LIB.Unity
{
    /// <summary>
    /// 内容读取器
    /// </summary>
    public class ContentReader
    {
        protected ObjectsPool contentObjectPool_ { get; private set; }

        public ContentReader(ObjectsPool _contentObjectPool)
        {
            contentObjectPool_ = _contentObjectPool;
        }

        /// <summary>
        /// 资产库的根目录的绝对路径
        /// </summary>
        public string AssetRootPath { get; set; }

        /// <summary>
        /// 内容的短路径，格式为 包名/内容名
        /// </summary>
        public string ContentUri { get; set; }

        /// <summary>
        /// 加载精灵
        /// </summary>
        /// <param name="_file">文件相对路径，相对于包含format.json的资源文件夹</param>
        /// <param name="_onFinish"></param>
        public void LoadSprite(string _file, Action<Sprite> _onFinish)
        {
            string dir = Path.Combine(AssetRootPath, ContentUri);
            string filefullpath = Path.Combine(dir, _file);
            contentObjectPool_.LoadTexture(filefullpath, null, (_texture) =>
            {
                var sprite = Sprite.Create(_texture as Texture2D, new Rect(0, 0, _texture.width, _texture.height), new Vector2(0.5f, 0.5f));
                _onFinish(sprite);
            });
        }

        /// <summary>
        /// 加载文本
        /// </summary>
        /// <param name="_file">文件相对路径，相对于包含format.json的资源文件夹</param>
        /// <param name="_onFinish"></param>
        public void LoadText(string _file, Action<byte[]> _onFinish)
        {
            string dir = Path.Combine(AssetRootPath, ContentUri);
            string filefullpath = Path.Combine(dir, _file);
            contentObjectPool_.LoadText(filefullpath, null, _onFinish);
        }
    }
}

"""


def generate(_options, _outputdir: str):
    output_dir = os.path.join(_outputdir, "Assets")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Scripts")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Module")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "_Generated_")
    os.makedirs(output_dir, exist_ok=True)

    contents = template
    contents = contents.replace("{{org_name}}", _options["org_name"])
    contents = contents.replace("{{module_name}}", _options["module_name"])
    contents = contents.replace("{{version}}", _options["version"])
    output_path = os.path.join(output_dir, "ContentReader.cs")
    writer.write(output_path, contents, True)
