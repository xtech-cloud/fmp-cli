import os
import uuid
from generator.template.utility import writer

template = """
//*************************************************************************************
//   !!! Generated by the fmp-cli {{version}}.  DO NOT EDIT!
//*************************************************************************************

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using LibMVCS = XTC.FMP.LIB.MVCS;
using {{org_name}}.FMP.MOD.{{module_name}}.LIB.Bridge;

namespace {{org_name}}.FMP.MOD.{{module_name}}.LIB.Unity
{
    /// <summary>
    /// 运行时基类
    /// </summary>
    ///<remarks>
    /// 存储模块运行时创建的对象
    ///</remarks>
    public abstract class MyRuntimeBase
    {
        public MonoBehaviour mono { get; set; }
        public MyConfig config { get; set; }
        public Dictionary<string, LibMVCS.Any> settings { get; set; }
        public LibMVCS.Logger logger { get; set; }
        public MyEntryBase entry { get; set; }

        /// <summary>
        /// ui的根对象
        /// </summary>
        public GameObject rootUI { get; private set; }

        /// <summary>
        /// ui的实例对象
        /// </summary>
        public GameObject instanceUI { get; private set; }

        /// <summary>
        /// 实例表，键为实例的uid
        /// </summary>
        public Dictionary<string, MyInstance> instances { get; private set; } = new Dictionary<string, MyInstance>();

        /// <summary>
        /// 处理从UAB中实例化的根对象
        /// </summary>
        /// <param name="_root">根对象</param>
        /// <param name="_uiSlot">ui的挂载槽</param>
        public virtual void ProcessRoot(GameObject _root, Transform _uiSlot)
        {
            // 将ui挂载到指定的槽上
            var root = _root.transform.Find(string.Format("Canvas/[UI_Root_({0})]", MyEntry.ModuleName));
            rootUI = root.gameObject;
            root.SetParent(_uiSlot);
            // 挂载后重置参数
            root.localScale = Vector3.one;
            root.localRotation = Quaternion.identity;
            root.localPosition = Vector3.zero;
            RectTransform rt = root.GetComponent<RectTransform>();
            rt.sizeDelta = Vector2.zero;
            rt.anchoredPosition = Vector2.zero;
            root.gameObject.SetActive(config.ui.visible);
            // 销毁根对象
            GameObject.Destroy(_root);
            // 查找实例的对象
            var rInstance = rootUI.transform.Find("instance");
            if (null == rInstance)
            {
                logger.Error("{0}/instance is required!", _root.name);
                return;
            }
            instanceUI = rInstance.gameObject;
            // 不显示模板
            instanceUI.gameObject.SetActive(false);
        }

        /// <summary>
        /// 创建实例
        /// </summary>
        /// <param name="_uid">实例的uid</param>
        /// <param name="_style">使用的样式名</param>
        /// <returns></returns>
        public virtual MyInstance CreateInstance(string _uid, string _style)
        {
            logger.Debug("create instance of {0}, uid is {1}, style is {2}", MyEntryBase.ModuleName, _uid, _style);
            MyInstance instance;
            if (instances.TryGetValue(_uid, out instance))
            {
                logger.Error("instance is exists");
                return instance;
            }

            instance = new MyInstance();
            instances[_uid] = instance;

            instance.rootUI = UnityEngine.GameObject.Instantiate(instanceUI, instanceUI.transform.parent);
            instance.rootUI.name = _uid;
            instance.logger = logger;
            instance.config = config;
            instance.settings = settings;

            MyConfig.Style style = null;
            foreach (var s in config.styles)
            {
                if (s.name.Equals(_style))
                    style = s;
            }
            instance.ApplyStyle(style);
            instance.HandleCreated();
            // 延时一帧执行，在发布消息时不能动态注册
            mono.StartCoroutine(delayDo(0, () =>
            {
                // 动态注册直系的MVCS
                entry.DynamicRegister(_uid, logger);
                var facade = entry.getDynamicHealthyFacade(_uid);
                facade.setUiBridge(new HealthyUiBridge());
                instance.viewBridgeHealthy = facade.getViewBridge() as IHealthyViewBridge;
            }));
            return instance;
        }

        /// <summary>
        /// 删除实例
        /// </summary>
        /// <param name="_uid">实例的uid</param>
        public virtual void DeleteInstance(string _uid)
        {
            logger.Debug("delete instance of {0}, uid is {1}", MyEntryBase.ModuleName, _uid);
            MyInstance instance;
            if (!instances.TryGetValue(_uid, out instance))
            {
                logger.Error("instance not found");
                return;
            }

            instance.HandleDeleted();
            GameObject.Destroy(instance.rootUI);
            instances.Remove(_uid);

            // 延时一帧执行，在发布消息时不能动态注销
            mono.StartCoroutine(delayDo(0, () =>
            {
                // 动态注销直系的MVCS
                entry.DynamicCancel(_uid, logger);
            }));
        }

        /// <summary>
        /// 打开实例
        /// </summary>
        /// <param name="_uid">实例的uid</param>
        /// <param name="_source">内容的源类型</param>
        /// <param name="_uri">内容的地址</param>
        /// <param name="_delay">延时时间，单位秒</param>
        public virtual void OpenInstance(string _uid, string _source, string _uri, float _delay)
        {
            logger.Debug("open instance of {0}, uid is {1}", MyEntryBase.ModuleName, _uid);
            MyInstance instance;
            if (!instances.TryGetValue(_uid, out instance))
            {
                logger.Error("instance not found");
                return;
            }
            mono.StartCoroutine(delayDo(_delay, () =>
            {
                instance.HandleOpened();
            }));
        }

        /// <summary>
        /// 关闭实例
        /// </summary>
        /// <param name="_uid">实例的uid</param>
        /// <param name="_delay">延时时间，单位秒</param>
        public virtual void CloseInstance(string _uid, float _delay)
        {
            logger.Debug("close instance of {0}, uid is {1}", MyEntryBase.ModuleName, _uid);
            MyInstance instance;
            if (!instances.TryGetValue(_uid, out instance))
            {
                logger.Error("instance not found");
                return;
            }
            mono.StartCoroutine(delayDo(_delay, () =>
            {
                instance.HandleClosed();
            }));
        }


        protected IEnumerator delayDo(float _time, System.Action _action)
        {
            if (0 == _time)
                yield return new WaitForEndOfFrame();
            else
                yield return new WaitForSeconds(_time);
            _action();
        }
    }
}
"""

def generate(_options, _outputdir: str):
    output_dir = os.path.join(_outputdir, "Assets")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Scripts")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "Module")
    os.makedirs(output_dir, exist_ok=True)
    output_dir = os.path.join(output_dir, "_Generated_")
    os.makedirs(output_dir, exist_ok=True)

    contents = template
    contents = contents.replace("{{org_name}}", _options["org_name"])
    contents = contents.replace("{{module_name}}", _options["module_name"])
    contents = contents.replace("{{version}}", _options["version"])
    output_path = os.path.join(output_dir, "MyRuntimeBase.cs")
    writer.write(output_path, contents, True)
