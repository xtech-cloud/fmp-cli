# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mygrpc.plugin_pb2 as plugin__pb2
import mygrpc.shared_pb2 as shared__pb2


class PluginStub(object):
    """插件
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/Create',
                request_serializer=plugin__pb2.PluginCreateRequest.SerializeToString,
                response_deserializer=shared__pb2.UuidResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/Update',
                request_serializer=plugin__pb2.PluginUpdateRequest.SerializeToString,
                response_deserializer=shared__pb2.UuidResponse.FromString,
                )
        self.Retrieve = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/Retrieve',
                request_serializer=shared__pb2.UuidRequest.SerializeToString,
                response_deserializer=plugin__pb2.PluginRetrieveResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/Delete',
                request_serializer=shared__pb2.UuidRequest.SerializeToString,
                response_deserializer=shared__pb2.UuidResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/List',
                request_serializer=plugin__pb2.PluginListRequest.SerializeToString,
                response_deserializer=plugin__pb2.PluginListResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/Search',
                request_serializer=plugin__pb2.PluginSearchRequest.SerializeToString,
                response_deserializer=plugin__pb2.PluginListResponse.FromString,
                )
        self.PrepareUpload = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/PrepareUpload',
                request_serializer=shared__pb2.UuidRequest.SerializeToString,
                response_deserializer=shared__pb2.PrepareUploadResponse.FromString,
                )
        self.FlushUpload = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/FlushUpload',
                request_serializer=shared__pb2.UuidRequest.SerializeToString,
                response_deserializer=shared__pb2.FlushUploadResponse.FromString,
                )
        self.AddFlag = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/AddFlag',
                request_serializer=shared__pb2.FlagOperationRequest.SerializeToString,
                response_deserializer=shared__pb2.FlagOperationResponse.FromString,
                )
        self.RemoveFlag = channel.unary_unary(
                '/xtc.fmp.repository.Plugin/RemoveFlag',
                request_serializer=shared__pb2.FlagOperationRequest.SerializeToString,
                response_deserializer=shared__pb2.FlagOperationResponse.FromString,
                )


class PluginServicer(object):
    """插件
    """

    def Create(self, request, context):
        """创建
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """更新
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """读取
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """删除
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """列举
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """搜索
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareUpload(self, request, context):
        """准备上传
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushUpload(self, request, context):
        """完成上传
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFlag(self, request, context):
        """添加标志
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFlag(self, request, context):
        """移除标志
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=plugin__pb2.PluginCreateRequest.FromString,
                    response_serializer=shared__pb2.UuidResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=plugin__pb2.PluginUpdateRequest.FromString,
                    response_serializer=shared__pb2.UuidResponse.SerializeToString,
            ),
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=shared__pb2.UuidRequest.FromString,
                    response_serializer=plugin__pb2.PluginRetrieveResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=shared__pb2.UuidRequest.FromString,
                    response_serializer=shared__pb2.UuidResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=plugin__pb2.PluginListRequest.FromString,
                    response_serializer=plugin__pb2.PluginListResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=plugin__pb2.PluginSearchRequest.FromString,
                    response_serializer=plugin__pb2.PluginListResponse.SerializeToString,
            ),
            'PrepareUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareUpload,
                    request_deserializer=shared__pb2.UuidRequest.FromString,
                    response_serializer=shared__pb2.PrepareUploadResponse.SerializeToString,
            ),
            'FlushUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushUpload,
                    request_deserializer=shared__pb2.UuidRequest.FromString,
                    response_serializer=shared__pb2.FlushUploadResponse.SerializeToString,
            ),
            'AddFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFlag,
                    request_deserializer=shared__pb2.FlagOperationRequest.FromString,
                    response_serializer=shared__pb2.FlagOperationResponse.SerializeToString,
            ),
            'RemoveFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFlag,
                    request_deserializer=shared__pb2.FlagOperationRequest.FromString,
                    response_serializer=shared__pb2.FlagOperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xtc.fmp.repository.Plugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Plugin(object):
    """插件
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/Create',
            plugin__pb2.PluginCreateRequest.SerializeToString,
            shared__pb2.UuidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/Update',
            plugin__pb2.PluginUpdateRequest.SerializeToString,
            shared__pb2.UuidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/Retrieve',
            shared__pb2.UuidRequest.SerializeToString,
            plugin__pb2.PluginRetrieveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/Delete',
            shared__pb2.UuidRequest.SerializeToString,
            shared__pb2.UuidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/List',
            plugin__pb2.PluginListRequest.SerializeToString,
            plugin__pb2.PluginListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/Search',
            plugin__pb2.PluginSearchRequest.SerializeToString,
            plugin__pb2.PluginListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/PrepareUpload',
            shared__pb2.UuidRequest.SerializeToString,
            shared__pb2.PrepareUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FlushUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/FlushUpload',
            shared__pb2.UuidRequest.SerializeToString,
            shared__pb2.FlushUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/AddFlag',
            shared__pb2.FlagOperationRequest.SerializeToString,
            shared__pb2.FlagOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xtc.fmp.repository.Plugin/RemoveFlag',
            shared__pb2.FlagOperationRequest.SerializeToString,
            shared__pb2.FlagOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
